import React, { useState, useRef, useEffect } from "react";

export default function AudioPlayer({
  audioFile,
  title,
  onTimeUpdate,
  seekTime,
  autoPlayOnSeek,
  questions = [],
  currentQuestion,
  answers = {},
  onQuestionJump,
  totalDuration = 1300, // 21.5 minutes in seconds
}) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(1);
  const [isMuted, setIsMuted] = useState(false);
  const audioRef = useRef(null);

  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const updateTime = () => {
      setCurrentTime(audio.currentTime);
      if (onTimeUpdate) {
        onTimeUpdate(audio.currentTime);
      }
    };

    const updateDuration = () => {
      setDuration(audio.duration);
    };

    audio.addEventListener("timeupdate", updateTime);
    audio.addEventListener("loadedmetadata", updateDuration);
    audio.addEventListener("ended", () => setIsPlaying(false));
    audio.addEventListener("error", (e) => {
      console.error("Audio error:", e);
    });
    audio.addEventListener("loadstart", () => {
      console.log("Audio loading started");
    });

    return () => {
      audio.removeEventListener("timeupdate", updateTime);
      audio.removeEventListener("loadedmetadata", updateDuration);
      audio.removeEventListener("ended", () => setIsPlaying(false));
    };
  }, [onTimeUpdate]);

  useEffect(() => {
    if (seekTime !== undefined && seekTime !== null && audioRef.current) {
      const audio = audioRef.current;

      // Wait for audio to be ready
      const handleSeek = () => {
        if (audio.readyState >= 2) {
          // HAVE_CURRENT_DATA or higher
          audio.currentTime = seekTime;
          setCurrentTime(seekTime);

          if (autoPlayOnSeek && !isPlaying) {
            audio.play().catch((err) => {
              console.log("Auto-play failed:", err);
            });
            setIsPlaying(true);
          }
        } else {
          // Wait for audio to load more data
          audio.addEventListener("canplay", handleSeek, { once: true });
        }
      };

      handleSeek();
    }
  }, [seekTime, autoPlayOnSeek]);

  const togglePlay = () => {
    const audio = audioRef.current;
    if (!audio) return;

    if (isPlaying) {
      audio.pause();
    } else {
      audio.play();
    }
    setIsPlaying(!isPlaying);
  };

  const handleVolumeChange = (e) => {
    const newVolume = parseFloat(e.target.value);
    setVolume(newVolume);
    if (audioRef.current) {
      audioRef.current.volume = newVolume;
    }
    if (newVolume > 0 && isMuted) {
      setIsMuted(false);
    }
  };

  const toggleMute = () => {
    const audio = audioRef.current;
    if (!audio) return;

    if (isMuted) {
      audio.volume = volume;
      setIsMuted(false);
    } else {
      audio.volume = 0;
      setIsMuted(true);
    }
  };

  const handleTimelineClick = (e) => {
    const audio = audioRef.current;
    if (!audio) return;

    const rect = e.currentTarget.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const clickPercent = clickX / rect.width;
    const newTime = clickPercent * (duration || totalDuration);

    audio.currentTime = newTime;
    if (onQuestionJump) {
      onQuestionJump(newTime);
    }
  };

  const handleQuestionMarkerClick = (timestamp) => {
    const audio = audioRef.current;
    if (!audio) return;

    // Pause audio first to prevent conflicts
    const wasPlaying = isPlaying;
    if (wasPlaying) {
      audio.pause();
      setIsPlaying(false);
    }

    // Set the audio time
    audio.currentTime = timestamp;
    setCurrentTime(timestamp);

    // Call the parent's jump handler
    if (onQuestionJump) {
      onQuestionJump(timestamp);
    }

    // Resume playing if it was playing before
    if (wasPlaying) {
      setTimeout(() => {
        audio.play();
        setIsPlaying(true);
      }, 100);
    }
  };

  const formatTime = (time) => {
    if (isNaN(time)) return "0:00";
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  const usedDuration = duration || totalDuration;
  const progressPercentage = usedDuration
    ? (currentTime / usedDuration) * 100
    : 0;

  return (
    <div className="bg-gradient-to-br from-white via-purple-50 to-indigo-50 backdrop-blur-md rounded-2xl shadow-xl border border-white/50 p-6">
      <audio ref={audioRef} src={audioFile} preload="metadata" />

      {/* Enhanced Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <div className="w-12 h-12 bg-gradient-to-br from-purple-600 to-indigo-600 rounded-2xl flex items-center justify-center shadow-lg">
            <svg
              className="w-6 h-6 text-white"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 14.142M8.464 15.536a5 5 0 01-7.072 0M2.636 5.636a9 9 0 000 12.728"
              />
            </svg>
          </div>
          <div>
            <h3 className="text-lg font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">
              {title}
            </h3>
            <p className="text-sm text-slate-600">DTZ B1 Hörprüfung - Kompletter Test</p>
          </div>
        </div>

        {/* Enhanced Stats */}
        <div className="flex items-center gap-3">
          <div className="bg-white/80 backdrop-blur-sm px-4 py-2 rounded-xl border border-white/50 shadow-sm">
            <div className="text-center">
              <div className="text-xs text-slate-500 mb-1">Beantwortet</div>
              <div className="text-lg font-bold text-emerald-600">
                {Object.keys(answers).length}/{questions.length}
              </div>
            </div>
          </div>
          {currentQuestion && (
            <div className="bg-gradient-to-br from-purple-500 to-indigo-600 text-white px-4 py-2 rounded-xl shadow-lg">
              <div className="text-center">
                <div className="text-xs text-purple-100 mb-1">Aktuelle Frage</div>
                <div className="text-lg font-bold">
                  {questions.findIndex((q) => q.id === currentQuestion.id) + 1}
                  {currentQuestion.pairedQuestion &&
                    ` & ${questions.findIndex((q) => q.id === currentQuestion.pairedQuestion.id) + 1}`}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Time Display */}
      <div className="flex items-center justify-between mb-4">
        <div className="text-sm font-mono font-bold text-slate-700 bg-white/80 px-3 py-1 rounded-lg">
          {formatTime(currentTime)}
        </div>
        <div className="text-sm font-mono font-bold text-slate-500 bg-white/80 px-3 py-1 rounded-lg">
          {formatTime(usedDuration)}
        </div>
      </div>

      {/* Enhanced Progress Bar */}
      <div className="mb-6">
        <div
          className="relative w-full h-3 bg-white/80 rounded-full cursor-pointer shadow-inner border border-white/50"
          onClick={handleTimelineClick}
        >
          {/* Question Markers */}
          {questions.map((question, index) => {
            const position = usedDuration
              ? (question.timestamp / usedDuration) * 100
              : 0;
            const isAnswered = answers[question.id] !== undefined;
            const isCurrent =
              currentQuestion?.id === question.id ||
              currentQuestion?.pairedQuestion?.id === question.id;

            return (
              <div
                key={question.id}
                className={`absolute top-0 w-3 h-3 rounded-full cursor-pointer transform -translate-x-1.5 shadow-lg border-2 border-white transition-all hover:scale-125 ${
                  isCurrent
                    ? "bg-gradient-to-br from-yellow-400 to-orange-500 ring-2 ring-yellow-300 scale-125"
                    : isAnswered
                      ? "bg-gradient-to-br from-emerald-400 to-emerald-600"
                      : "bg-gradient-to-br from-purple-400 to-indigo-500"
                }`}
                style={{ left: `${position}%` }}
                onClick={(e) => {
                  e.stopPropagation();
                  handleQuestionMarkerClick(question.timestamp);
                }}
                title={`Frage ${index + 1}: ${question.questionText?.substring(0, 50)}...`}
              />
            );
          })}

          {/* Progress Fill */}
          <div
            className="absolute top-0 left-0 h-3 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-full transition-all duration-150 shadow-sm"
            style={{ width: `${progressPercentage}%` }}
          />

          {/* Progress Handle */}
          <div
            className="absolute top-0 w-5 h-5 bg-white shadow-lg transform -translate-x-2.5 -translate-y-1 rounded-full border-2 border-purple-500 transition-all duration-150"
            style={{ left: `${progressPercentage}%` }}
          />
        </div>
      </div>

      {/* Enhanced Controls */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <button
            onClick={togglePlay}
            className="w-14 h-14 bg-gradient-to-br from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white rounded-2xl flex items-center justify-center transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            {isPlaying ? (
              <svg className="w-7 h-7" fill="currentColor" viewBox="0 0 24 24">
                <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z" />
              </svg>
            ) : (
              <svg
                className="w-7 h-7 ml-1"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M8 5v14l11-7z" />
              </svg>
            )}
          </button>

          {/* Volume Control */}
          <div className="flex items-center gap-3 bg-white/80 backdrop-blur-sm px-4 py-2 rounded-xl border border-white/50">
            <button
              onClick={toggleMute}
              className="w-8 h-8 bg-slate-100 hover:bg-slate-200 rounded-lg flex items-center justify-center transition-colors"
            >
              {isMuted || volume === 0 ? (
                <svg
                  className="w-4 h-4 text-slate-600"
                  fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z" />
              </svg>
            ) : (
                <svg
                  className="w-4 h-4 text-slate-600"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z" />
                </svg>
              )}
            </button>
            <input
              type="range"
              min="0"
              max="1"
              step="0.1"
              value={isMuted ? 0 : volume}
              onChange={handleVolumeChange}
              className="w-20 h-2 bg-gradient-to-r from-slate-200 to-slate-300 rounded-full appearance-none cursor-pointer"
              style={{
                background: `linear-gradient(to right, #8b5cf6 0%, #8b5cf6 ${(isMuted ? 0 : volume) * 100}%, #e2e8f0 ${(isMuted ? 0 : volume) * 100}%, #e2e8f0 100%)`,
              }}
            />
          </div>
        </div>

        {/* Quick Navigation */}
        <div className="flex items-center gap-2">
          {[
            {
              label: "Teil 1",
              questions: questions.slice(0, 4),
              color: "from-blue-400 to-blue-600",
            },
            {
              label: "Teil 2",
              questions: questions.slice(4, 9),
              color: "from-emerald-400 to-emerald-600",
            },
            {
              label: "Teil 3",
              questions: questions.slice(9, 17),
              color: "from-purple-400 to-purple-600",
            },
            {
              label: "Teil 4",
              questions: questions.slice(17, 20),
              color: "from-rose-400 to-rose-600",
            },
          ].map((teil, teilIndex) => {
            const hasAnsweredQuestions = teil.questions.some(q => answers[q.id] !== undefined);
            const isCurrentTeil = teil.questions.some(q => 
              currentQuestion?.id === q.id || currentQuestion?.pairedQuestion?.id === q.id
            );
            
            return (
              <button
                key={teilIndex}
                onClick={() => {
                  const firstQuestion = teil.questions[0];
                  if (firstQuestion) {
                    handleQuestionMarkerClick(firstQuestion.timestamp);
                  }
                }}
                className={`px-3 py-2 rounded-lg text-xs font-medium transition-all transform hover:scale-105 shadow-sm ${
                  isCurrentTeil
                    ? `bg-gradient-to-r ${teil.color} text-white shadow-lg ring-2 ring-white/50`
                    : hasAnsweredQuestions
                      ? `bg-gradient-to-r ${teil.color} text-white opacity-80 hover:opacity-100`
                      : "bg-white/80 text-slate-600 hover:bg-white"
                }`}
                title={`Zu ${teil.label} springen`}
              >
                {teil.label}
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
}
            )}
          </button>
          <input
            type="range"
            min="0"
            max="1"
            step="0.1"
            value={isMuted ? 0 : volume}
            onChange={handleVolumeChange}
            className="w-16 h-1 bg-slate-200 rounded-lg appearance-none cursor-pointer"
            style={{
              background: `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${(isMuted ? 0 : volume) * 100}%, #e2e8f0 ${(isMuted ? 0 : volume) * 100}%, #e2e8f0 100%)`,
            }}
          />
        </div>

        <div className="flex-1">
          {/* Time Display */}
          <div className="flex justify-between text-xs text-slate-600 mb-1">
            <span className="font-mono">{formatTime(currentTime)}</span>
            <span className="font-mono">{formatTime(usedDuration)}</span>
          </div>

          {/* Compact Timeline with Question Markers */}
          <div className="relative">
            <div
              className="w-full h-3 bg-gradient-to-r from-slate-100 to-slate-200 rounded-full shadow-inner border border-slate-200/50 overflow-hidden cursor-pointer group"
              onClick={handleTimelineClick}
            >
              <div
                className="h-full bg-gradient-to-r from-blue-500 via-blue-600 to-indigo-600 rounded-full shadow-sm transition-all duration-300 ease-out"
                style={{ width: `${progressPercentage}%` }}
              />
            </div>

            {/* Compact Question Markers */}
            <div className="absolute top-0 w-full h-3">
              {questions
                .filter((q, index) => {
                  if (q.id.startsWith("teil3")) {
                    return index % 2 === 0;
                  }
                  return true;
                })
                .map((q) => {
                  const position = (q.timestamp / usedDuration) * 100;
                  const originalIndex = questions.findIndex(
                    (question) => question.id === q.id
                  );
                  const isAnswered = answers[q.id] !== undefined;
                  const isCurrent =
                    currentQuestion?.id === q.id ||
                    currentQuestion?.pairedQuestion?.id === q.id;

                  return (
                    <button
                      key={q.id}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleQuestionMarkerClick(q.timestamp);
                      }}
                      className={`absolute top-0 group transform -translate-x-1 transition-all duration-200 hover:scale-110 ${
                        isCurrent
                          ? "z-30 scale-110"
                          : isAnswered
                            ? "z-20"
                            : "z-10"
                      }`}
                      style={{ left: `${position}%` }}
                      title={`Q${originalIndex + 1} - ${formatTime(q.timestamp)}`}
                    >
                      <div
                        className={`w-4 h-4 rounded-full border-2 transition-all duration-200 shadow-sm ${
                          isCurrent
                            ? "bg-gradient-to-r from-purple-400 to-purple-500 border-white shadow-purple-300/50"
                            : isAnswered
                              ? "bg-gradient-to-r from-emerald-500 to-green-600 border-white shadow-emerald-300/50"
                              : "bg-gradient-to-r from-slate-300 to-slate-400 border-white hover:from-slate-400 hover:to-slate-500"
                        }`}
                      ></div>
                    </button>
                  );
                })}
            </div>

            {/* Current Time Indicator */}
            <div
              className="absolute top-0 w-0.5 h-3 bg-white shadow-sm transform -translate-x-0.5 rounded-full border border-slate-300"
              style={{ left: `${progressPercentage}%` }}
            />
          </div>
        </div>
      </div>

      {/* Compact Quick Jump Buttons - Hidden */}
      <div className="hidden">
        {[
          {
            label: "T1",
            questions: questions.slice(0, 4),
            color: "bg-blue-500",
          },
          {
            label: "T2",
            questions: questions.slice(4, 9),
            color: "bg-green-500",
          },
          {
            label: "T3",
            questions: questions.slice(9, 17),
            color: "bg-purple-500",
          },
          {
            label: "T4",
            questions: questions.slice(17, 20),
            color: "bg-red-500",
          },
        ].map((teil, teilIndex) => (
          <div key={teilIndex} className="flex gap-0.5">
            {teil.questions
              .filter((q, qIndex) => {
                if (teil.label === "T3") {
                  return qIndex % 2 === 0;
                }
                return true;
              })
              .map((q) => {
                const globalIndex = questions.findIndex(
                  (question) => question.id === q.id
                );
                const isAnswered = answers[q.id] !== undefined;
                const isCurrent =
                  currentQuestion?.id === q.id ||
                  currentQuestion?.pairedQuestion?.id === q.id;

                return (
                  <button
                    key={q.id}
                    onClick={() => handleQuestionMarkerClick(q.timestamp)}
                    className={`w-6 h-6 rounded text-xs font-bold transition-all hover:scale-105 ${
                      isCurrent
                        ? `${teil.color} text-white ring-1 ring-yellow-300 scale-105`
                        : isAnswered
                          ? "bg-green-500 text-white"
                          : `${teil.color} text-white opacity-70 hover:opacity-100`
                    }`}
                    title={`${teil.label} Q${globalIndex + 1}`}
                  >
                    {globalIndex + 1}
                  </button>
                );
              })}
          </div>
        ))}
      </div>
    </div>
  );
}
